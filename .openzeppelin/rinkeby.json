{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x6e90c5f01098DfEcA6Ad3381D1d02d38D2cfD502",
      "txHash": "0x0f48152010b3028b8012bdfd071816ec9be51ed50a3d009794e3ecf80111c9c0",
      "kind": "uups"
    }
  ],
  "impls": {
    "bd873bd29aca62cf8c15838c4deafd72b853cf92ffe600dd0a620db427629574": {
      "address": "0xC17D73b7b797CDD93EcCE4467719405631f7986f",
      "txHash": "0x9872989f510ce24c5ef7d3fd13a2c665c954cdadb80ff36fb1a6256fc321ca6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4300_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:26"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:74"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol:42"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "PullPaymentUpgradeable",
            "label": "_escrow",
            "type": "t_contract(EscrowUpgradeable)3618",
            "src": "@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol:28"
          },
          {
            "contract": "PullPaymentUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol:76"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "KRBTokenV01",
            "label": "minBalanceToTransfer",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:61"
          },
          {
            "contract": "KRBTokenV01",
            "label": "minBalanceToReceive",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:65"
          },
          {
            "contract": "KRBTokenV01",
            "label": "minBalanceToIssue",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:69"
          },
          {
            "contract": "KRBTokenV01",
            "label": "minPriceToIssue",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:73"
          },
          {
            "contract": "KRBTokenV01",
            "label": "minStakeToIssue",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:77"
          },
          {
            "contract": "KRBTokenV01",
            "label": "maxStakeToIssue",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:81"
          },
          {
            "contract": "KRBTokenV01",
            "label": "feePercentage",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:85"
          },
          {
            "contract": "KRBTokenV01",
            "label": "feesAvailableForWithdraw",
            "type": "t_uint256",
            "src": "contracts/KRBTokenV01.sol:89"
          },
          {
            "contract": "KRBTokenV01",
            "label": "registry",
            "type": "t_mapping(t_bytes32,t_struct(VerifiableData)4669_storage)",
            "src": "contracts/KRBTokenV01.sol:111"
          },
          {
            "contract": "KRBTokenV01",
            "label": "stakes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/KRBTokenV01.sol:116"
          },
          {
            "contract": "KRBTokenV01",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/KRBTokenV01.sol:804"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(VerifiableData)4669_storage)": {
            "label": "mapping(bytes32 => struct KRBTokenV01.VerifiableData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(VerifiableData)4669_storage": {
            "label": "struct KRBTokenV01.VerifiableData",
            "members": [
              {
                "label": "credentialStatus",
                "type": "t_enum(Status)4663"
              },
              {
                "label": "disputedBy",
                "type": "t_bytes32"
              }
            ]
          },
          "t_enum(Status)4663": {
            "label": "enum KRBTokenV01.Status",
            "members": [
              "None",
              "Issued",
              "Disputed",
              "Revoked",
              "Suspended",
              "Expired"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(EscrowUpgradeable)3618": {
            "label": "contract EscrowUpgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4300_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)4300_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3999_storage"
              }
            ]
          },
          "t_struct(Set)3999_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)199_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    }
  }
}
